/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.visp.wirex;

import com.jgoodies.binding.PresentationModel;
import com.jgoodies.binding.adapter.BasicComponentFactory;
import com.jgoodies.binding.value.ValueModel;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.event.CaretListener;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentListener;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.MenuDragMouseListener;
import javax.swing.event.MenuKeyListener;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputListener;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TableColumnModelListener;
import javax.swing.event.TableModelListener;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.event.UndoableEditListener;
import net.visp.wirex.annotations.Bind;
import net.visp.wirex.annotations.DELETE;
import net.visp.wirex.annotations.Data;
import net.visp.wirex.annotations.Event;
import net.visp.wirex.annotations.Form;
import net.visp.wirex.annotations.GET;
import net.visp.wirex.annotations.POST;
import net.visp.wirex.annotations.PUT;
import net.visp.wirex.annotations.Path;
import net.visp.wirex.annotations.Type;
import net.visp.wirex.enums.Media;
import net.visp.wirex.exceptions.UnknownListenerException;
import net.visp.wirex.exceptions.WrongComponentException;
import net.visp.wirex.interfaces.Model;
import net.visp.wirex.listeners.JButtonListener;
import net.visp.wirex.listeners.JTextFieldListener;

/**
 *
 * @author RBORJA
 */
public class ApplicationControllerFactory {

    static {
        components = new HashMap<>();
        models = new HashMap<>();
    }
    private final static Map<String, Component> components;
    private final static Map<Class<? extends Model>, Model> models;
    private static String hostname;

    public static Component checkout(String name) {
        return components.remove(name);
    }

    public static Model checkout(Class<? extends Model> modelClass) {
        if (modelClass != null) {
            return models.get(modelClass);
        } else {
            return null;
        }
    }

    public static void connect(String url) {
        if (url.endsWith("/")) {
            hostname = url;
        } else {
            hostname = url + "/";
        }
        // TODO: Connect client and return response code and throw exception if not 200
    }

    private ApplicationControllerFactory() {
    }

    public static MVP prepare(Class viewClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException {

        Bind bind = (Bind) viewClass.getAnnotation(Bind.class);
        Class modelClass = bind.model();
        Class presenterClass = bind.presenter();
        Field[] fields = viewClass.getDeclaredFields();
        ArrayList<Field> actionFields = new ArrayList<>();
        Model model = (Model) modelClass.newInstance();

        models.put(modelClass, model);

        for (Field field : fields) {
            Data data = field.getAnnotation(Data.class);
            Event event = field.getAnnotation(Event.class);
            if (data != null) {
                if (JTextField.class == field.getType()) {
                    bindComponent(JTextField.class, model, data.value());
                } else if (JLabel.class == field.getType()) {
                    bindComponent(JTextField.class, model, data.value());
                } else if (JCheckBox.class == field.getType()) {
                    bindComponent(JCheckBox.class, model, data.value());
                } else {
                    try {
                        throw new WrongComponentException("Component " + field.getType() + " cannot be used for binding the model");
                    } catch (WrongComponentException ex) {
                    }
                }
            }
            if (event != null) {
                actionFields.add(field);
            }
        }

        final JPanel view = (JPanel) viewClass.newInstance();

        Object presenter = presenterClass.getDeclaredConstructor(Model.class, JPanel.class).newInstance(model, view);
        for (Field field : actionFields) {
            final Event event = field.getAnnotation(Event.class);
            if (event != null) {
                field.setAccessible(true);
                Class component = field.getType();
                Method[] listener = getArrayMethods(presenter, event.value());
                if (ActionListener.class == event.type()) {
                    if (component == JButton.class) {
                        JButtonListener.addActionListener(view, field, presenter, listener[0]);
                    } else if (component == JTextField.class) {
                        JTextFieldListener.addActionListener(view, field, presenter, listener[0]);
                    }
                } else if (CaretListener.class == event.type()) {
                } else if (CellEditorListener.class == event.type()) {
                } else if (ChangeListener.class == event.type()) {
                } else if (ComponentListener.class == event.type()) {
                } else if (ContainerListener.class == event.type()) {
                } else if (DocumentListener.class == event.type()) {
                } else if (FocusListener.class == event.type()) {
                } else if (HierarchyBoundsListener.class == event.type()) {
                } else if (HierarchyListener.class == event.type()) {
                } else if (HyperlinkListener.class == event.type()) {
                } else if (InternalFrameListener.class == event.type()) {
                } else if (ItemListener.class == event.type()) {
                } else if (KeyListener.class == event.type()) {
                    if (component == JButton.class) {
                        JButtonListener.addKeyListener(view, field, presenter, listener);
                    } else if (component == JTextField.class) {
                        JTextFieldListener.addKeyListener(view, field, presenter, listener);
                    }
                } else if (ListDataListener.class == event.type()) {
                } else if (ListSelectionListener.class == event.type()) {
                } else if (MenuDragMouseListener.class == event.type()) {
                } else if (MenuKeyListener.class == event.type()) {
                } else if (MenuListener.class == event.type()) {
                } else if (MouseInputListener.class == event.type()) {
                } else if (MouseListener.class == event.type()) {
                } else if (MouseMotionListener.class == event.type()) {
                } else if (MouseWheelListener.class == event.type()) {
                } else if (PopupMenuListener.class == event.type()) {
                } else if (PropertyChangeListener.class == event.type()) {
                } else if (TableColumnModelListener.class == event.type()) {
                } else if (TableModelListener.class == event.type()) {
                } else if (TreeExpansionListener.class == event.type()) {
                } else if (TreeModelListener.class == event.type()) {
                } else if (TreeSelectionListener.class == event.type()) {
                } else if (TreeWillExpandListener.class == event.type()) {
                } else if (UndoableEditListener.class == event.type()) {
                } else if (VetoableChangeListener.class == event.type()) {
                } else if (WindowFocusListener.class == event.type()) {
                } else if (WindowListener.class == event.type()) {
                } else if (WindowStateListener.class == event.type()) {
                } else {
                    try {
                        throw new UnknownListenerException(event.type() + " is not a listener class");
                    } catch (UnknownListenerException ex) {
                    }
                }
            }
        }

        for (Method method : presenterClass.getMethods()) {
        }

        return new MVP() {
            @Override
            public void display(Class<? extends Window> window) {
                Window dialog;
                if (window == JFrame.class) {
                    dialog = new JFrame();
                    ((JFrame) dialog).setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                } else {
                    dialog = new JDialog();
                    ((JDialog) dialog).setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                }
                dialog.add(view);
                dialog.pack();
                dialog.setMinimumSize(dialog.getPreferredSize());
                Container parent = dialog.getParent();

                if (parent != null) {
                    dialog.setLocationRelativeTo(parent);
                } else {
                    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int) ((dimension.getWidth() - dialog.getWidth()) / 2);
                    int y = (int) ((dimension.getHeight() - dialog.getHeight()) / 2);
                    dialog.setLocation(x, y);
                }

                dialog.setVisible(true);
            }
        };
    }

    private static Method[] getArrayMethods(Object presenter, String[] values) throws NoSuchMethodException {
        Method[] methods = new Method[values.length];
        for (int i = 0; i < values.length; i++) {
            methods[i] = presenter.getClass().getMethod(values[i]);
            injectJersey(presenter, methods[i]);
        }
        return methods;
    }

    private static void injectJersey(Object presenter, Method method) {
        Path path = method.getAnnotation(Path.class);
        Type type = method.getAnnotation(Type.class);
        Form form = method.getAnnotation(Form.class);
        POST post = method.getAnnotation(POST.class);
        GET get = method.getAnnotation(GET.class);
        PUT put = method.getAnnotation(PUT.class);
        DELETE delete = method.getAnnotation(DELETE.class);
        String urlPath;
        if (path != null) {
            if (post != null && form != null) {
                try {
                    if (path.value().startsWith("/")) {
                        urlPath = path.value().substring(1);
                    } else {
                        urlPath = path.value();
                    }
                    Class presenterClass = presenter.getClass();
                    Method initMethod = presenterClass.getSuperclass().getDeclaredMethod("init", String.class, Media.class, String.class);
                    initMethod.setAccessible(true);
                    initMethod.invoke(presenter, hostname + urlPath, type.value(), "post");
                } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
                    Logger.getLogger(ApplicationControllerFactory.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (get != null && form != null) {
                try {
                    if (path.value().startsWith("/")) {
                        urlPath = path.value().substring(1);
                    } else {
                        urlPath = path.value();
                    }
                    Class presenterClass = presenter.getClass();
                    Method initMethod = presenterClass.getSuperclass().getDeclaredMethod("init", String.class, Media.class, String.class);
                    initMethod.setAccessible(true);
                    initMethod.invoke(presenter, hostname + urlPath, type.value(), "get");
                } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
                    Logger.getLogger(ApplicationControllerFactory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private static void bindComponent(Class component, Object bean, String property) {
        PresentationModel adapter = new PresentationModel(bean);
        ValueModel componentModel = adapter.getModel(property);
        JComponent newComponent;
        if (JTextField.class == component) {
            newComponent = BasicComponentFactory.createTextField(componentModel);
        } else if (JLabel.class == component) {
            newComponent = BasicComponentFactory.createLabel(componentModel);
        } else if (JCheckBox.class == component) {
            newComponent = BasicComponentFactory.createCheckBox(componentModel, "");
        } else {
            // TODO: add exception
            newComponent = null;
        }
        components.put(property, newComponent);
    }
}
