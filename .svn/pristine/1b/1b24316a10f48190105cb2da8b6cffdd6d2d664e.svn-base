/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.visp.mvpshortcut;

import com.jgoodies.binding.PresentationModel;
import com.jgoodies.binding.adapter.BasicComponentFactory;
import com.jgoodies.binding.value.ValueModel;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import net.visp.mvpshortcut.annotations.Bind;
import net.visp.mvpshortcut.annotations.Data;
import net.visp.mvpshortcut.annotations.Event;
import net.visp.mvpshortcut.interfaces.Model;
import net.visp.mvpshortcut.listeners.JButtonListener;

/**
 *
 * @author RBORJA
 */
public class ApplicationControllerFactory {

    static {
        components = new HashMap<>();
    }
    private final static Map<String, Component> components;

    public static Component checkout(String name) {
        return components.remove(name);
    }

    public static MVP prepare(Class viewClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException {

        Bind bind = (Bind) viewClass.getAnnotation(Bind.class);
        final Class modelClass = bind.model();
        final Class presenterClass = bind.presenter();
        Field[] fields = viewClass.getDeclaredFields();
        ArrayList<Field> actionFields = new ArrayList<>();
        final Object model = modelClass.newInstance();

        for (Field field : fields) {
            final Data data = field.getAnnotation(Data.class);
            if (data != null) {
                if (JTextField.class == field.getType()) {
                    bindComponent(JTextField.class, model, data.value());
                } else if (JLabel.class == field.getType()) {
                    bindComponent(JTextField.class, model, data.value());
                } else if (JCheckBox.class == field.getType()) {
                    bindComponent(JCheckBox.class, model, data.value());
                    System.out.println("hi");
                } // put else to add exception
            } else {
                actionFields.add(field);
            }
        }

        final JPanel view = (JPanel) viewClass.newInstance();
        
        final Object presenter = presenterClass.getDeclaredConstructor(Model.class, JPanel.class).newInstance(model, view);
        for (Field field : actionFields) {
            final Event event = field.getAnnotation(Event.class);
            if (event != null) {
                field.setAccessible(true);
                Map<String, Method> listener = getArrayMethods(presenterClass, event.value());
                if (ActionListener.class == event.type()) {
                    JButtonListener.addActionListener(view, field, listener.get(event.value()[0]), presenter);
                } else if (KeyListener.class == event.type()) {
                    JButtonListener.addKeyListener(view, field, listener, presenter);
                }
            }
        }

        return new MVP() {
            @Override
            public void display(Class<? extends Window> window) {
                Window dialog = null;
                if (window.getClass() == JFrame.class.getClass()) {
                    dialog = new JFrame();
                } else {
                    dialog = new JDialog();
                }
                dialog.add(view);
                dialog.pack();
                dialog.setMinimumSize(dialog.getPreferredSize());

                Container parent = dialog.getParent();

                if (parent != null) {
                    dialog.setLocationRelativeTo(parent);
                } else {
                    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int) ((dimension.getWidth() - dialog.getWidth()) / 2);
                    int y = (int) ((dimension.getHeight() - dialog.getHeight()) / 2);
                    dialog.setLocation(x, y);
                }

                dialog.setVisible(true);
            }
        };
    }

    private static Map getArrayMethods(Class presenterClass, String[] values) throws NoSuchMethodException {
        Map<String, Method> methods = new HashMap<>();
        for (String value : values) {
            Method method = presenterClass.getMethod(value);
            methods.put(value, method);
        }
        return methods;
    }

    private static void bindComponent(Class component, Object bean, String property) {
        PresentationModel adapter = new PresentationModel(bean);
        ValueModel componentModel = adapter.getModel(property);
        JComponent newComponent;
        if (JTextField.class == component) {
            newComponent = BasicComponentFactory.createTextField(componentModel);
        } else if (JLabel.class == component) {
            newComponent = BasicComponentFactory.createLabel(componentModel);
        } else if (JCheckBox.class == component) {
            newComponent = BasicComponentFactory.createCheckBox(componentModel, "");
        } else {
            // TODO: add exception
            newComponent = null;
        }
        components.put(property, newComponent);
    }
}
